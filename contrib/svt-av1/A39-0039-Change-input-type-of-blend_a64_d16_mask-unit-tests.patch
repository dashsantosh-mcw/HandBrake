From fdcb8858d6140f41ab52e1b6a7e861d3d9a7f897 Mon Sep 17 00:00:00 2001
From: Salome Thirot <salome.thirot@arm.com>
Date: Fri, 25 Oct 2024 15:16:07 +0100
Subject: [PATCH 39/56] Change input type of blend_a64_d16_mask unit tests

svt_aom_lowbd_blend_a64_d16_mask and svt_aom_highbd_blend_a64_d16_mask
take 16-bit input, but the tests were only giving 8 or 10-bit input,
which is too low for the output to be anything other than zero, meaning
the tests weren't picking up any computation error.

These tests now fail for the SSE4_1 and AVX2 versions, so disable them
until they can be fixed.
---
 Source/Lib/Codec/common_dsp_rtcd.c |  4 +++-
 test/CompoundUtilTest.cc           | 29 ++++++++++++++++++-----------
 2 files changed, 21 insertions(+), 12 deletions(-)

diff --git a/Source/Lib/Codec/common_dsp_rtcd.c b/Source/Lib/Codec/common_dsp_rtcd.c
index cea324a8..0b70ca88 100644
--- a/Source/Lib/Codec/common_dsp_rtcd.c
+++ b/Source/Lib/Codec/common_dsp_rtcd.c
@@ -464,7 +464,9 @@ void svt_aom_setup_common_rtcd_internal(EbCpuFlags flags) {
     SET_SSE41_AVX2(svt_aom_blend_a64_mask, svt_aom_blend_a64_mask_c, svt_aom_blend_a64_mask_sse4_1, svt_aom_blend_a64_mask_avx2);
     SET_SSE41_AVX2(svt_aom_blend_a64_hmask, svt_aom_blend_a64_hmask_c, svt_aom_blend_a64_hmask_sse4_1, svt_av1_blend_a64_hmask_avx2);
     SET_SSE41_AVX2(svt_aom_blend_a64_vmask, svt_aom_blend_a64_vmask_c, svt_aom_blend_a64_vmask_sse4_1, svt_av1_blend_a64_vmask_avx2);
-    SET_SSE41_AVX2(svt_aom_lowbd_blend_a64_d16_mask, svt_aom_lowbd_blend_a64_d16_mask_c, svt_aom_lowbd_blend_a64_d16_mask_sse4_1, svt_aom_lowbd_blend_a64_d16_mask_avx2);
+    // TODO: Re-enable once they pass the unit tests.
+    //SET_SSE41_AVX2(svt_aom_lowbd_blend_a64_d16_mask, svt_aom_lowbd_blend_a64_d16_mask_c, svt_aom_lowbd_blend_a64_d16_mask_sse4_1, svt_aom_lowbd_blend_a64_d16_mask_avx2);
+    SET_ONLY_C(svt_aom_lowbd_blend_a64_d16_mask, svt_aom_lowbd_blend_a64_d16_mask_c);
     SET_SSE41(svt_aom_highbd_blend_a64_mask, svt_aom_highbd_blend_a64_mask_c, svt_aom_highbd_blend_a64_mask_8bit_sse4_1);
     SET_SSE41_AVX2(svt_aom_highbd_blend_a64_vmask_16bit, svt_aom_highbd_blend_a64_vmask_16bit_c, svt_aom_highbd_blend_a64_vmask_16bit_sse4_1, svt_av1_highbd_blend_a64_vmask_16bit_avx2);
     SET_SSE41_AVX2(svt_aom_highbd_blend_a64_hmask_16bit, svt_aom_highbd_blend_a64_hmask_16bit_c, svt_aom_highbd_blend_a64_hmask_16bit_sse4_1, svt_av1_highbd_blend_a64_hmask_16bit_avx2);
diff --git a/test/CompoundUtilTest.cc b/test/CompoundUtilTest.cc
index c2a56c28..c537205d 100644
--- a/test/CompoundUtilTest.cc
+++ b/test/CompoundUtilTest.cc
@@ -51,6 +51,7 @@ class CompBlendTest : public ::testing::TestWithParam<BlendTestParam> {
         func_ref_ = nullptr;
         func_tst_ = nullptr;
         no_sub_ = false;
+        is_d16_ = false;
     }
 
     void SetUp() override {
@@ -76,7 +77,8 @@ class CompBlendTest : public ::testing::TestWithParam<BlendTestParam> {
 
     void run_test() {
         const int iterations = 1000;
-        SVTRandom rnd(0, (1 << bd_) - 1);
+        int max = is_d16_ ? 16 : bd_;
+        SVTRandom rnd(0, (1 << max) - 1);
         SVTRandom mask_rnd(0, 64);
 
         // generate random mask
@@ -142,6 +144,7 @@ class CompBlendTest : public ::testing::TestWithParam<BlendTestParam> {
     int bd_;
     const char *tst_fn_name;  // test function name
     bool no_sub_;
+    bool is_d16_;
 };
 
 using LbdBlendA64MaskFunc = void (*)(uint8_t *, uint32_t, const uint8_t *,
@@ -227,6 +230,7 @@ class LbdCompBlendD16Test
         bd_ = 10;
         func_ref_ = TEST_GET_PARAM(0);
         func_tst_ = TEST_GET_PARAM(1);
+        is_d16_ = true;
     }
 
     void run_blend(int subw, int subh) override {
@@ -261,21 +265,23 @@ class LbdCompBlendD16Test
                   &conv_params);
     }
 };
+GTEST_ALLOW_UNINSTANTIATED_PARAMETERIZED_TEST(LbdCompBlendD16Test);
 
 TEST_P(LbdCompBlendD16Test, BlendA64MaskD16) {
     run_test();
 }
 
-#ifdef ARCH_X86_64
-INSTANTIATE_TEST_SUITE_P(
-    SSE4_1, LbdCompBlendD16Test,
-    ::testing::ValuesIn({make_tuple(svt_aom_lowbd_blend_a64_d16_mask_c,
-                                    svt_aom_lowbd_blend_a64_d16_mask_sse4_1)}));
-INSTANTIATE_TEST_SUITE_P(
-    AVX2, LbdCompBlendD16Test,
-    ::testing::ValuesIn({make_tuple(svt_aom_lowbd_blend_a64_d16_mask_c,
-                                    svt_aom_lowbd_blend_a64_d16_mask_avx2)}));
-#endif  // ARCH_X86_64
+// TODO: Re-enable when the overflow is fixed.
+// #ifdef ARCH_X86_64
+// INSTANTIATE_TEST_SUITE_P(
+//    SSE4_1, LbdCompBlendD16Test,
+//    ::testing::ValuesIn({make_tuple(svt_aom_lowbd_blend_a64_d16_mask_c,
+//                                    svt_aom_lowbd_blend_a64_d16_mask_sse4_1)}));
+// INSTANTIATE_TEST_SUITE_P(
+//    AVX2, LbdCompBlendD16Test,
+//    ::testing::ValuesIn({make_tuple(svt_aom_lowbd_blend_a64_d16_mask_c,
+//                                    svt_aom_lowbd_blend_a64_d16_mask_avx2)}));
+// #endif  // ARCH_X86_64
 
 #ifdef ARCH_AARCH64
 INSTANTIATE_TEST_SUITE_P(
@@ -502,6 +508,7 @@ class HbdCompBlendD16Test
         bd_ = 10;
         func_ref_ = TEST_GET_PARAM(0);
         func_tst_ = TEST_GET_PARAM(1);
+        is_d16_ = true;
     }
 
     void run_hbd_test(uint8_t bd) {
-- 
2.36.0.windows.1

